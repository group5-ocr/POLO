import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../contexts/AuthContext";

interface UploadResult {
  filename: string;
  file_size: number;
  extracted_text_length: number;
  extracted_text_preview: string;
  easy_text: string;
  status: string;
  doc_id?: string;
  json_file_path?: string;
  arxiv_id?: string;
  is_arxiv_paper?: boolean;
  // JSONL Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
  jsonl_data?: Array<{
    index: number;
    text: string;
    easy_text?: string;
    image_path?: string;
  }>;
  // Math Í≤∞Í≥º Ï∂îÍ∞Ä
  math_result?: {
    overview: string;
    items: Array<{
      index: number;
      line_start: number;
      line_end: number;
      kind: string;
      env: string;
      equation: string;
      explanation: string;
    }>;
  };
  // arXiv Í≤∞Í≥º Ï∂îÍ∞Ä
  arxiv_result?: {
    arxiv_id: string;
    title: string;
    tex_id: string;
    paths: any;
  };
}

export default function Upload() {
  const { user, isLoading } = useAuth();
  const navigate = useNavigate();
  const [uploading, setUploading] = useState(false);
  const [result, setResult] = useState<UploadResult | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [easyResults, setEasyResults] = useState<any>(null);
  const [isLoadingEasy, setIsLoadingEasy] = useState(false);
  const [progress, setProgress] = useState(0);

  // ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
  const updateProgress = (value: number) => {
    setProgress(Math.min(100, Math.max(0, value)));
  };

  // Easy Í≤∞Í≥º Î°úÎìú Ìï®Ïàò
  const loadEasyResults = async (paperId: string) => {
    setIsLoadingEasy(true);
    try {
      const response = await fetch(`${import.meta.env.VITE_API_BASE ?? "http://localhost:8000"}/api/upload/download/easy-json/${paperId}`);
      if (response.ok) {
        const data = await response.json();
        setEasyResults(data);
        console.log(`[Easy Í≤∞Í≥º] Î°úÎìú ÏôÑÎ£å: ${data.total_chunks}Í∞ú Ï≤≠ÌÅ¨`);
      } else {
        console.log(`[Easy Í≤∞Í≥º] Î°úÎìú Ïã§Ìå®: ${response.status}`);
      }
    } catch (error) {
      console.log(`[Easy Í≤∞Í≥º] Î°úÎìú ÏóêÎü¨: ${error}`);
    } finally {
      setIsLoadingEasy(false);
    }
  };

  // Ïâ¨Ïö¥ ÎÖºÎ¨∏ ÏÉùÏÑ± Ìï®Ïàò (ÌÜµÌï©Îêú Í∏∞Îä•)
  const handleGenerateEasyPaper = async () => {
    if (!result?.doc_id) {
      alert("Î®ºÏ†Ä ÎÖºÎ¨∏ÏùÑ ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî.");
      return;
    }

    setIsLoadingEasy(true);
    setProgress(0);
    
    try {
      const apiBase = import.meta.env.VITE_API_BASE ?? "http://localhost:8000";
      
      // 1Îã®Í≥Ñ: Easy Î™®Îç∏Î°ú Ï†ÑÏÜ°
      updateProgress(20);
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 25 * 60 * 1000); // 25Î∂Ñ ÌÉÄÏûÑÏïÑÏõÉ
      
      const response = await fetch(`${apiBase}/api/upload/send-to-easy`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          paper_id: result.doc_id
        }),
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);

      if (response.ok) {
        const data = await response.json();
        console.log("Easy Î™®Îç∏ Ï†ÑÏÜ° ÏÑ±Í≥µ:", data);
        
        // 2Îã®Í≥Ñ: ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏
        updateProgress(60);
        
        // 3Îã®Í≥Ñ: Easy Í≤∞Í≥º Î°úÎìú
        updateProgress(80);
        await loadEasyResults(result.doc_id!);
        
        // 4Îã®Í≥Ñ: ÏôÑÎ£å
        updateProgress(100);
      } else {
        const errorData = await response.json();
        console.error("Easy Î™®Îç∏ Ï†ÑÏÜ° Ïã§Ìå®:", errorData);
        alert(`Ïâ¨Ïö¥ ÎÖºÎ¨∏ ÏÉùÏÑ± Ïã§Ìå®: ${errorData.detail || response.statusText}`);
        setProgress(0);
      }
    } catch (error) {
      console.error("Ïâ¨Ïö¥ ÎÖºÎ¨∏ ÏÉùÏÑ± ÏóêÎü¨:", error);
      alert('Ïâ¨Ïö¥ ÎÖºÎ¨∏ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      setProgress(0);
    } finally {
      setIsLoadingEasy(false);
    }
  };

  // Easy Í≤∞Í≥ºÎ•º HTMLÎ°ú Îã§Ïö¥Î°úÎìúÌïòÎäî Ìï®Ïàò
  const downloadEasyResultsAsHTML = () => {
    if (!easyResults || !result?.doc_id) return;
    
    // ÏÑúÎ≤ÑÏóêÏÑú ÏÉùÏÑ±Îêú HTML ÌååÏùº Îã§Ïö¥Î°úÎìú
    const apiBase = import.meta.env.VITE_API_BASE ?? "http://localhost:8000";
    const downloadUrl = `${apiBase}/api/results/${result.doc_id}/html`;
    
    const a = document.createElement('a');
    a.href = downloadUrl;
    a.download = `polo_easy_explanation_${result.doc_id}.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
  };

  // Easy Í≤∞Í≥ºÎ•º Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú Î≥¥Îäî Ìï®Ïàò
  const viewEasyResultsInBrowser = () => {
    if (!easyResults || !result?.doc_id) return;
    
    // ÏÉà ÌÉ≠ÏóêÏÑú HTML Í≤∞Í≥º Ïó¥Í∏∞
    const apiBase = import.meta.env.VITE_API_BASE ?? "http://localhost:8000";
    const viewUrl = `${apiBase}/api/results/${result.doc_id}/html`;
    window.open(viewUrl, '_blank');
  };

  // Easy Í≤∞Í≥º HTML ÏÉùÏÑ± Ìï®Ïàò
  const generateEasyResultsHTML = (easyResults: any) => {
    const sections = easyResults.sections || easyResults.chunks || [];
    const totalSections = easyResults.total_sections || easyResults.total_chunks || 0;
    
    return `
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Easy Í≤∞Í≥º - ÎÖºÎ¨∏ ${easyResults.paper_id}</title>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px 10px 0 0; text-align: center; }
        .header h1 { margin: 0; font-size: 2.5em; }
        .stats { display: flex; justify-content: center; gap: 30px; margin-top: 20px; }
        .stat { text-align: center; }
        .stat-number { font-size: 2em; font-weight: bold; }
        .content { padding: 30px; }
        .section { margin-bottom: 30px; padding: 25px; border: 1px solid #e0e0e0; border-radius: 8px; background: #fafafa; }
        .section-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; padding-bottom: 10px; border-bottom: 1px solid #ddd; }
        .section-title { font-size: 18px; font-weight: bold; color: #2c3e50; }
        .section-status { padding: 6px 12px; border-radius: 4px; font-size: 12px; }
        .status-success { background: #4caf50; color: white; }
        .status-failed { background: #f44336; color: white; }
        .original-content { background: #e3f2fd; padding: 15px; border-radius: 5px; margin-bottom: 15px; font-size: 0.9em; line-height: 1.6; }
        .korean-translation { background: #f3e5f5; padding: 15px; border-radius: 5px; margin-bottom: 15px; line-height: 1.8; }
        .image-container { text-align: center; margin-top: 15px; }
        .image-container img { max-width: 100%; height: auto; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
        .no-image { color: #666; font-style: italic; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ Easy Î™®Îç∏ Í≤∞Í≥º</h1>
            <p>ÎÖºÎ¨∏ ID: ${easyResults.paper_id}</p>
            <div class="stats">
                <div class="stat">
                    <div class="stat-number">${totalSections}</div>
                    <div>Ï¥ù ÏÑπÏÖò</div>
                </div>
                <div class="stat">
                    <div class="stat-number">${easyResults.success_count}</div>
                    <div>ÏÑ±Í≥µ</div>
                </div>
                <div class="stat">
                    <div class="stat-number">${easyResults.failed_count}</div>
                    <div>Ïã§Ìå®</div>
                </div>
            </div>
        </div>
        <div class="content">
            ${sections.map((section: any, index: number) => `
                <div class="section">
                    <div class="section-header">
                        <span class="section-title">${section.title || `ÏÑπÏÖò ${section.index + 1}`}</span>
                        <span class="section-status ${section.status === 'success' ? 'status-success' : 'status-failed'}">
                            ${section.status === 'success' ? '‚úÖ ÏÑ±Í≥µ' : '‚ùå Ïã§Ìå®'}
                        </span>
                    </div>
                    <div class="original-content">
                        <strong>ÏõêÎ≥∏ ÎÇ¥Ïö©:</strong><br>
                        ${(section.original_content || section.original_text || '').substring(0, 500)}${(section.original_content || section.original_text || '').length > 500 ? '...' : ''}
                    </div>
                    ${section.korean_translation ? `
                        <div class="korean-translation">
                            <strong>Ïâ¨Ïö¥ ÏÑ§Î™Ö:</strong><br>
                            ${section.korean_translation}
                        </div>
                    ` : ''}
                    <div class="image-container">
                        ${section.image_path ? 
                            `<img src="${section.image_path}" alt="ÏãúÍ∞ÅÌôî Ïù¥ÎØ∏ÏßÄ">` : 
                            '<div class="no-image">Ïù¥ÎØ∏ÏßÄ ÏóÜÏùå</div>'
                        }
                    </div>
                </div>
            `).join('')}
        </div>
    </div>
</body>
</html>`;
  };
  const [dragActive, setDragActive] = useState(false);
  const [arxivId, setArxivId] = useState("");
  const [arxivTitle, setArxivTitle] = useState("");
  const [showArxivForm, setShowArxivForm] = useState(false);
  const [activeTab, setActiveTab] = useState<"preview" | "jsonl" | "math">(
    "preview"
  );
  const [downloadInfo, setDownloadInfo] = useState<any>(null);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);

  // Î°úÍ∑∏Ïù∏ Ï≤¥ÌÅ¨
  useEffect(() => {
    if (!isLoading && !user) {
      alert("Î°úÍ∑∏ÏïÑÏõÉ ÎêòÏóàÏäµÎãàÎã§.");
      navigate("/");
    }
  }, [user, isLoading, navigate]);

  const uploadFile = async (file: File) => {
    setUploading(true);
    setError(null);
    setResult(null);

    try {
      const apiBase = import.meta.env.VITE_API_BASE ?? "http://localhost:8000";
      console.log("[Upload] API Base URL:", apiBase);
      console.log(`[convert] Ìò∏Ï∂ú ÏãúÏûë ‚Üí ${apiBase}/api/upload/convert`);

      const formData = new FormData();
      formData.append("file", file);

      const response = await fetch(`${apiBase}/api/upload/convert`, {
        method: "POST",
        body: formData,
      });

      if (!response.ok) {
        let detail = "ÏóÖÎ°úÎìú Ïã§Ìå®";
        try { const j = await response.json(); detail = j.detail || detail; } catch {}
        console.log(`[convert] Ïã§Ìå®: ${response.status} ${detail}`);
        throw new Error(`[convert] ${detail}`);
      }

      const data = await response.json();

      // ÏÑúÎ≤ÑÏóêÏÑú Î∞òÌôòÎêú Ïã§Ï†ú ÎÖºÎ¨∏ ID ÏÇ¨Ïö©
      setResult({ ...data, status: data.status ?? "processing" });
      console.log(`[convert] ÏÑ±Í≥µ: doc_id=${data?.doc_id ?? "-"}`);

      // Îã§Ïö¥Î°úÎìú Ï†ïÎ≥¥ Ï°∞Ìöå (Ïã§Ï†ú ÎÖºÎ¨∏ IDÍ∞Ä ÏûàÏùÑ ÎïåÎßå)
      if (data.doc_id) {
        try {
          console.log(`[download/info] Ìò∏Ï∂ú ‚Üí ${apiBase}/api/upload/download/info/${data.doc_id}`);
          const infoResponse = await fetch(
            `${
              import.meta.env.VITE_API_BASE ?? "http://localhost:8000"
            }/api/upload/download/info/${data.doc_id}`
          );
          if (infoResponse.ok) {
            const infoData = await infoResponse.json();
            setDownloadInfo(infoData);
            console.log(`[download/info] ÏÑ±Í≥µ`);
          } else {
            console.log(`[download/info] Ïã§Ìå®: ${infoResponse.status}`);
          }
        } catch (err) {
          console.warn("Îã§Ïö¥Î°úÎìú Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®:", err);
          console.log(`[download/info] ÏòàÏô∏: ${String(err)}`);
        }
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "ÏóÖÎ°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
    } finally {
      setUploading(false);
    }
  };

  const handleFile = (file: File) => {
    if (file.type !== "application/pdf") {
      setError("PDF ÌååÏùºÎßå ÏóÖÎ°úÎìúÌï† Ïàò ÏûàÏäµÎãàÎã§.");
      return;
    }

    if (file.size > 50 * 1024 * 1024) {
      setError("ÌååÏùºÏùÄ 50MB Ïù¥ÌïòÎßå Í∞ÄÎä•Ìï©ÎãàÎã§.");
      return;
    }

    setSelectedFile(file);
    setError(null);
    setResult(null);
  };

  const onChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {
    const file = e.target.files?.[0];
    if (!file) return;
    handleFile(file);
  };

  const handleDrag = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);

    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      handleFile(e.dataTransfer.files[0]);
    }
  };

  const startConversion = () => {
    if (selectedFile) {
      uploadFile(selectedFile);
    }
  };

  const uploadFromArxiv = async (arxivId: string, title: string) => {
    setUploading(true);
    setError(null);
    setResult(null);

    try {
      const response = await fetch(
        `${
          import.meta.env.VITE_API_BASE ?? "http://localhost:8000"
        }/api/upload/from-arxiv`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            user_id: 1, // ÏûÑÏãú ÏÇ¨Ïö©Ïûê ID
            arxiv_id: arxivId,
            title: title,
          }),
        }
      );

      if (!response.ok) {
        let detail = "arXiv ÏóÖÎ°úÎìú Ïã§Ìå®";
        try { const j = await response.json(); detail = j.detail || detail; } catch {}
        console.log(`[from-arxiv] Ïã§Ìå®: ${response.status} ${detail}`);
        throw new Error(`[from-arxiv] ${detail}`);
      }

      const data = await response.json();

      // ÏÑúÎ≤ÑÏóêÏÑú Î∞òÌôòÎêú Ïã§Ï†ú ÎÖºÎ¨∏ ID ÏÇ¨Ïö©
      const docId = data.tex_id;

      // arXiv ÏóÖÎ°úÎìúÎäî ÎπÑÎèôÍ∏∞ Ï≤òÎ¶¨Ïù¥ÎØÄÎ°ú ÏÑ±Í≥µ Î©îÏãúÏßÄÎßå ÌëúÏãú
      setResult({
        filename: `${arxivId}.pdf`,
        file_size: 0,
        extracted_text_length: 0,
        extracted_text_preview: `arXiv ÎÖºÎ¨∏ Ï≤òÎ¶¨ ÏãúÏûë: ${title}\nÎÖºÎ¨∏ ID: ${docId}\n\nÏ≤òÎ¶¨ Ï§ëÏûÖÎãàÎã§...`,
        easy_text:
          "ÎÖºÎ¨∏Ïù¥ Îã§Ïö¥Î°úÎìúÎêòÍ≥† Ï≤òÎ¶¨ Ï§ëÏûÖÎãàÎã§. ÏôÑÎ£åÎêòÎ©¥ Í≤∞Í≥ºÍ∞Ä ÌëúÏãúÎê©ÎãàÎã§.",
        status: "processing",
        doc_id: docId,
        json_file_path: `/api/download/${docId}.json`,
        // arXiv Ï≤òÎ¶¨ Í≤∞Í≥º Ï∂îÍ∞Ä
        arxiv_result: {
          arxiv_id: arxivId,
          title: title,
          tex_id: data.tex_id,
          paths: data.paths,
        },
      });

      // Îã§Ïö¥Î°úÎìú Ï†ïÎ≥¥ Ï°∞Ìöå (Ïã§Ï†ú ÎÖºÎ¨∏ IDÍ∞Ä ÏûàÏùÑ ÎïåÎßå)
      if (docId) {
        try {
          const infoResponse = await fetch(
            `${
              import.meta.env.VITE_API_BASE ?? "http://localhost:8000"
            }/api/upload/download/info/${docId}`
          );
          if (infoResponse.ok) {
            const infoData = await infoResponse.json();
            setDownloadInfo(infoData);
            console.log(`[download/info] ÏÑ±Í≥µ`);
          } else {
            console.log(`[download/info] Ïã§Ìå®: ${infoResponse.status}`);
          }
        } catch (err) {
          console.warn("Îã§Ïö¥Î°úÎìú Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®:", err);
          console.log(`[download/info] ÏòàÏô∏: ${String(err)}`);
        }
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "arXiv ÏóÖÎ°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
    } finally {
      setUploading(false);
    }
  };

  const downloadFile = async (
    filename: string,
    fileType: "json" | "pdf" | "math" | "easy" | "raw"
  ) => {
    try {
      const baseUrl = import.meta.env.VITE_API_BASE ?? "http://localhost:8000";
      let endpoint;
      if (fileType === "json") {
        endpoint = `${baseUrl}/api/upload/download/info/${filename}`;
      } else if (fileType === "easy") {
        endpoint = `${baseUrl}/api/upload/download/easy/${filename}`;
      } else if (fileType === "math") {
        endpoint = `${baseUrl}/api/upload/download/math/${filename}`;
      } else {
        endpoint = `${baseUrl}/api/upload/download/raw/${filename}`;
      }

      const response = await fetch(endpoint);

      if (!response.ok) {
        throw new Error("Îã§Ïö¥Î°úÎìú Ïã§Ìå®");
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch (err) {
      alert("Îã§Ïö¥Î°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
    }
  };

  // Î°úÎî© Ï§ëÏù¥Í±∞ÎÇò Î°úÍ∑∏Ïù∏ÌïòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ Î°úÎî© ÌôîÎ©¥ ÌëúÏãú
  if (isLoading) {
    return (
      <div className="upload-page">
        <div className="upload-container">
          <div style={{ textAlign: "center", padding: "40px" }}>
            <div className="upload-spinner"></div>
            <p>Î°úÎî© Ï§ë...</p>
          </div>
        </div>
      </div>
    );
  }

  // Î°úÍ∑∏Ïù∏ÌïòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ Îπà ÌôîÎ©¥ (useEffectÏóêÏÑú Î¶¨Îã§Ïù¥Î†âÌä∏ Ï≤òÎ¶¨)
  if (!user) {
    return null;
  }

  return (
    <div className="upload-page">
      <div className="upload-container">
        <div className="upload-header">
          <h1>ÎÖºÎ¨∏ Î≥ÄÌôòÌïòÍ∏∞</h1>
          <p>PDF ÌååÏùºÏùÑ ÏóÖÎ°úÎìúÌïòÎ©¥ AIÍ∞Ä ÏâΩÍ≤å Ïù¥Ìï¥Ìï† Ïàò ÏûàÎèÑÎ°ù Î≥ÄÌôòÌï¥ÎìúÎ†§Ïöî!</p>
        </div>

        <div className="upload-actions">
          <button
            onClick={() => setShowArxivForm(!showArxivForm)}
            className="btn-secondary"
          >
            {showArxivForm ? "PDF ÏóÖÎ°úÎìú" : "arXiv ÎÖºÎ¨∏"}
          </button>
        </div>

        {showArxivForm && (
          <div className="arxiv-form">
            <h3>arXiv ÎÖºÎ¨∏ ÏóÖÎ°úÎìú</h3>
            <div className="form-group">
              <label htmlFor="arxivId">arXiv ID (Ïòà: 2408.12345)</label>
              <input
                type="text"
                id="arxivId"
                value={arxivId}
                onChange={(e) => setArxivId(e.target.value)}
                placeholder="2408.12345"
                disabled={uploading}
              />
            </div>
            <div className="form-group">
              <label htmlFor="arxivTitle">ÎÖºÎ¨∏ Ï†úÎ™©</label>
              <input
                type="text"
                id="arxivTitle"
                value={arxivTitle}
                onChange={(e) => setArxivTitle(e.target.value)}
                placeholder="ÎÖºÎ¨∏ Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                disabled={uploading}
              />
            </div>
            <button
              onClick={() => uploadFromArxiv(arxivId, arxivTitle)}
              disabled={!arxivId || !arxivTitle || uploading}
              className="btn-primary"
            >
              arXiv ÎÖºÎ¨∏ Ï≤òÎ¶¨ÌïòÍ∏∞
            </button>
          </div>
        )}

        <div
          className={`upload-area ${dragActive ? "drag-active" : ""} ${
            uploading ? "uploading" : ""
          }`}
          onDragEnter={handleDrag}
          onDragLeave={handleDrag}
          onDragOver={handleDrag}
          onDrop={handleDrop}
        >
          <input
            type="file"
            accept="application/pdf"
            onChange={onChange}
            disabled={uploading}
            className="file-input"
          />
          <div className="upload-content">
            {uploading ? (
              <>
                <div className="upload-spinner"></div>
                <h3>AIÍ∞Ä ÎÖºÎ¨∏ÏùÑ Î∂ÑÏÑùÌïòÍ≥† ÏûàÏäµÎãàÎã§...</h3>
                <p>Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî!</p>
              </>
            ) : selectedFile ? (
              <>
                <div className="upload-icon">üìÑ</div>
                <h3>ÏÑ†ÌÉùÎêú ÌååÏùº</h3>
                <p className="selected-file-name">{selectedFile.name}</p>
                <p className="selected-file-size">
                  {(selectedFile.size / 1024).toFixed(2)} KB
                </p>
                <div className="upload-info">
                  <span>‚Ä¢ PDF ÌååÏùºÎßå ÏßÄÏõê</span>
                  <span>‚Ä¢ ÏµúÎåÄ 50MB</span>
                </div>
              </>
            ) : (
              <>
                <div className="upload-icon">üìÅ</div>
                <h3>PDF ÌååÏùºÏùÑ ÏóÖÎ°úÎìúÌïòÏÑ∏Ïöî</h3>
                <p>Ïó¨Í∏∞Î•º ÌÅ¥Î¶≠ÌïòÍ±∞ÎÇò ÌååÏùºÏùÑ ÎìúÎûòÍ∑∏ÌïòÏó¨ ÏóÖÎ°úÎìúÌïòÏÑ∏Ïöî</p>
                <div className="upload-info">
                  <span>‚Ä¢ PDF ÌååÏùºÎßå ÏßÄÏõê</span>
                  <span>‚Ä¢ ÏµúÎåÄ 50MB</span>
                </div>
              </>
            )}
          </div>
        </div>

        {selectedFile && !uploading && (
          <div className="conversion-actions">
            <button
              onClick={startConversion}
              className="btn-primary btn-convert"
            >
              ÎÖºÎ¨∏ Î≥ÄÌôòÌïòÍ∏∞
            </button>
            <button
              onClick={() => {
                setSelectedFile(null);
                setError(null);
                setResult(null);
              }}
              className="btn-secondary"
            >
              ÌååÏùº Îã§Ïãú ÏÑ†ÌÉù
            </button>
          </div>
        )}

        {error && (
          <div className="error-message">
            <div className="error-icon">‚ö†Ô∏è</div>
            <div className="error-content">
              <strong>Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§</strong>
              <p>{error}</p>
            </div>
          </div>
        )}

        {result && (
          <div className="result-container">
            <div className="result-header">
              <h3>
                {result.status === "success" ? "Î≥ÄÌôò ÏôÑÎ£å!" : "Î≥ÄÌôò Ïã§Ìå®"}
              </h3>
              <p>
                {result.status === "success"
                  ? "ÎÖºÎ¨∏Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î≥ÄÌôòÎêòÏóàÏäµÎãàÎã§"
                  : "ÎÖºÎ¨∏ Î≥ÄÌôò Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§"}
              </p>
              {result.is_arxiv_paper && result.arxiv_id && (
                <div className="arxiv-info">
                  <span className="arxiv-badge">üìÑ arXiv ÎÖºÎ¨∏</span>
                  <span className="arxiv-id">ID: {result.arxiv_id}</span>
                </div>
              )}
              <div
                className={`status-badge ${
                  result.status === "success"
                    ? "status-success"
                    : "status-error"
                }`}
              >
                <span className="status-icon">
                  {result.status === "success" ? "‚úÖ" : "‚ùå"}
                </span>
                <span className="status-text">
                  {result.status === "success" ? "Î≥ÄÌôò ÏÑ±Í≥µ" : "Î≥ÄÌôò Ïã§Ìå®"}
                </span>
              </div>
            </div>



            {downloadInfo && (
              <div className="download-info">
                <h4>Îã§Ïö¥Î°úÎìú Í∞ÄÎä•Ìïú ÌååÏùº</h4>
                <div className="file-list">
                  {downloadInfo.files.easy.length > 0 && (
                    <div className="file-category">
                      <h5>
                        üñºÔ∏è Ïâ¨Ïö¥ Î≤ÑÏ†Ñ Ïù¥ÎØ∏ÏßÄ ({downloadInfo.files.easy.length}Í∞ú)
                      </h5>
                      <button
                        className="btn-download"
                        onClick={() =>
                          result.doc_id && downloadFile(result.doc_id, "easy")
                        }
                      >
                        Ïù¥ÎØ∏ÏßÄ Îã§Ïö¥Î°úÎìú
                      </button>
                    </div>
                  )}

                  {downloadInfo.files.math.length > 0 && (
                    <div className="file-category">
                      <h5>üìê ÏàòÏãù Ìï¥ÏÑ§ ({downloadInfo.files.math.length}Í∞ú)</h5>
                      <div className="file-items">
                        {downloadInfo.files.math.map(
                          (file: any, index: number) => (
                            <button
                              key={index}
                              className="btn-download-small"
                              onClick={() =>
                                result.doc_id &&
                                downloadFile(result.doc_id, "math")
                              }
                            >
                              {file.name} ({(file.size / 1024).toFixed(1)}KB)
                            </button>
                          )
                        )}
                      </div>
                    </div>
                  )}

                  {downloadInfo.files.preprocess.length > 0 && (
                    <div className="file-category">
                      <h5>
                        üìÑ Ï†ÑÏ≤òÎ¶¨ ÌååÏùº ({downloadInfo.files.preprocess.length}
                        Í∞ú)
                      </h5>
                      <div className="file-items">
                        {downloadInfo.files.preprocess.map(
                          (file: any, index: number) => (
                            <button
                              key={index}
                              className="btn-download-small"
                              onClick={() => downloadFile(file.name, "json")}
                            >
                              {file.name} ({(file.size / 1024).toFixed(1)}KB)
                            </button>
                          )
                        )}
                      </div>
                    </div>
                  )}

                  {downloadInfo.files.raw.length > 0 && (
                    <div className="file-category">
                      <h5>üìÅ ÏõêÎ≥∏ ÌååÏùº ({downloadInfo.files.raw.length}Í∞ú)</h5>
                      <div className="file-items">
                        {downloadInfo.files.raw.map(
                          (file: any, index: number) => (
                            <button
                              key={index}
                              className="btn-download-small"
                              onClick={() => downloadFile(file.name, "raw")}
                            >
                              {file.name} ({(file.size / 1024).toFixed(1)}KB)
                            </button>
                          )
                        )}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* ÏßÑÌñâÎ•† ÌëúÏãú */}
            {isLoadingEasy && (
              <div className="progress-section">
                <h4>üîÑ Ïâ¨Ïö¥ ÎÖºÎ¨∏ ÏÉùÏÑ± Ï§ë...</h4>
                <div className="progress-container">
                  <div className="progress-bar">
                    <div 
                      className="progress-fill" 
                      style={{ width: `${progress}%` }}
                    ></div>
                  </div>
                  <span className="progress-text">{progress}%</span>
                </div>
              </div>
            )}

            {/* Ïâ¨Ïö¥ ÎÖºÎ¨∏ ÏÉùÏÑ± Î≤ÑÌäº */}
            <div className="model-buttons">
              <button
                className="btn-primary"
                onClick={handleGenerateEasyPaper}
                disabled={!result.doc_id || isLoadingEasy}
              >
                {isLoadingEasy ? "ÏÉùÏÑ± Ï§ë..." : "üìö Ïâ¨Ïö¥ ÎÖºÎ¨∏ ÏÉùÏÑ±"}
              </button>
            </div>

            {/* Easy Í≤∞Í≥º ÌëúÏãú */}
            {easyResults && (
              <div className="easy-results">
                <h4>‚úÖ Ïâ¨Ïö¥ ÎÖºÎ¨∏ ÏÉùÏÑ± ÏôÑÎ£å!</h4>
                <div className="results-stats">
                  <div className="stat-item">
                    <span className="stat-number">{easyResults.total_sections || easyResults.total_chunks}</span>
                    <span className="stat-label">Ï¥ù ÏÑπÏÖò</span>
                  </div>
                  <div className="stat-item success">
                    <span className="stat-number">{easyResults.success_count}</span>
                    <span className="stat-label">ÏÑ±Í≥µ</span>
                  </div>
                  <div className="stat-item failed">
                    <span className="stat-number">{easyResults.failed_count}</span>
                    <span className="stat-label">Ïã§Ìå®</span>
                  </div>
                </div>
                
                <div className="download-section">
                  <button 
                    onClick={downloadEasyResultsAsHTML}
                    className="btn btn-primary download-main"
                    style={{ marginRight: '10px' }}
                  >
                    üìö ÎÖºÎ¨∏ Îã§Ïö¥Î°úÎìú
                  </button>
                  <button 
                    onClick={viewEasyResultsInBrowser}
                    className="btn btn-secondary"
                  >
                    üåê Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú Î≥¥Í∏∞
                  </button>
                </div>
              </div>
            )}

            {/* Î°úÎî© ÏÉÅÌÉú */}
            {isLoadingEasy && (
              <div className="loading-easy">
                <p>üîÑ Easy Î™®Îç∏Ïù¥ ÎÖºÎ¨∏ÏùÑ Ïâ¨Ïö¥ Ïñ∏Ïñ¥Î°ú Î≥ÄÌôò Ï§ëÏûÖÎãàÎã§...</p>
              </div>
            )}

            <div className="action-buttons">
              <button className="btn-secondary" onClick={() => navigate("/")}>
                ÌôàÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
