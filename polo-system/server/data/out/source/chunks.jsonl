{"doc_id":"source","schema_version":"0.1","ts":"2025-09-15T08:07:33Z","type":"chunk","chunk_index":0,"text":"\\title{You Only Look Once: \\\\\nUnified, Real-Time Object Detection}\n\n\\author{Joseph Redmon$^*$, Santosh Divvala$^{* \\dag}$, Ross Girshick$^\\P$, Ali Farhadi$^{* \\dag}$\\\\\n\\small{University of Washington$^*$, Allen Institute for AI$^\\dag$, Facebook AI Research$^\\P$}\\\\ \\url{http://pjreddie.com/yolo/}}\n\n\\begin{abstract}\n\nWe present YOLO, a new approach to object detection. Prior work on object detection repurposes classifiers to perform detection. Instead, we frame object detection as a regression problem to spatially separated bounding boxes and associated class probabilities. A single neural network predicts bounding boxes and class probabilities directly from full images in one evaluation. Since the whole detection pipeline is a single network, it can be optimized end-to-end directly on detection performance.\n\nOur unified architecture is extremely fast. Our base YOLO model processes images in real-time at 45 frames per second. A smaller version of the network, Fast YOLO, processes an astounding 155 frames per second while still achieving double the mAP of other real-time detectors. Compared to state-of-the-art detection systems, YOLO makes more localization errors but is less likely to predict false positives on background. Finally, YOLO learns very general representations of objects. It outperforms other detection methods, including DPM and R-CNN, when generalizing from natural images to other domains like artwork.\n\\end{abstract}\n\n\\section{Introduction}\n\nHumans glance at an image and instantly know what objects are in the image, where they are, and how they interact. The human visual system is fast and accurate, allowing us to perform complex tasks like driving with little conscious thought. Fast, accurate algorithms for object detection would allow computers to drive cars without specialized sensors, enable assistive devices to convey real-time scene information to human users, and unlock the potential for general purpose, responsive robotic systems.\n\nCurrent detection systems repurpose classifiers to perform detection. To detect an object, these systems take a classifier for that object and evaluate it at various locations and scales in a test image. Systems like deformable parts models (DPM) use a sliding window approach where the classifier is run at evenly spaced locations over the entire image \\cite{lsvm-pami}.\n\nMore recent approaches like R-CNN use region proposal methods to first generate potential bounding boxes in an image and then run a classifier on these proposed boxes. After classification, post-processing is used to refine the bounding boxes, eliminate duplicate detections, and rescore the boxes based on other objects in the scene \\cite{girshick2014rich}. These complex pipelines are slow and hard to optimize because each individual component must be trained separately.\n\n⟨FIG:system⟩\n\nWe reframe object detection as a single regression problem, straight from image pixels to bounding box coordinates and class probabilities. Using our system, you only look once (YOLO) at an image to predict what objects are present and where they are.\n\nYOLO is refreshingly simple: see Figure \\ref{system}. A single convolutional network simultaneously predicts multiple bounding boxes and class probabilities for those boxes. YOLO trains on full images and directly optimizes detection performance. This unified model has several benefits over traditional methods of object detection.","char_count":3433,"start_para":0,"end_para":11,"start_sent":null,"end_sent":null,"placeholder":{"count":{"eq_display":0,"eq_inline":0,"figure":1,"table":0},"ids":{"eq_display":[],"eq_inline":[],"figure":["system"],"table":[]}}}
{"doc_id":"source","schema_version":"0.1","ts":"2025-09-15T08:07:33Z","type":"chunk","chunk_index":1,"text":"YOLO is refreshingly simple: see Figure \\ref{system}. A single convolutional network simultaneously predicts multiple bounding boxes and class probabilities for those boxes. YOLO trains on full images and directly optimizes detection performance. This unified model has several benefits over traditional methods of object detection.\n\nFirst, YOLO is extremely fast. Since we frame detection as a regression problem we don't need a complex pipeline. We simply run our neural network on a new image at test time to predict detections. Our base network runs at 45 frames per second with no batch processing on a Titan X GPU and a fast version runs at more than 150 fps. This means we can process streaming video in real-time with less than 25 milliseconds of latency. Furthermore, YOLO achieves more than twice the mean average precision of other real-time systems. For a demo of our system running in real-time on a webcam please see our project webpage: \\url{http://pjreddie.com/yolo/}.\n\nSecond, YOLO reasons globally about the image when making predictions. Unlike sliding window and region proposal-based techniques, YOLO sees the entire image during training and test time so it implicitly encodes contextual information about classes as well as their appearance. Fast R-CNN, a top detection method \\cite{DBLP:journals/corr/Girshick15}, mistakes background patches in an image for objects because it can't see the larger context. YOLO makes less than half the number of background errors compared to Fast R-CNN.\n\nThird, YOLO learns generalizable representations of objects. When trained on natural images and tested on artwork, YOLO outperforms top detection methods like DPM and R-CNN by a wide margin. Since YOLO is highly generalizable it is less likely to break down when applied to new domains or unexpected inputs.\n\nYOLO still lags behind state-of-the-art detection systems in accuracy. While it can quickly identify objects in images it struggles to precisely localize some objects, especially small ones. We examine these tradeoffs further in our experiments.\n\nAll of our training and testing code is open source.\nA variety of pretrained models are also available to download.\n\n\\section{Unified Detection}\n\nWe unify the separate components of object detection into a single neural network. Our network uses features from the entire image to predict each bounding box. It also predicts all bounding boxes across all classes for an image simultaneously. This means our network reasons globally about the full image and all the objects in the image. The YOLO design enables end-to-end training and real-time speeds while maintaining high average precision.\n\nOur system divides the input image into an $S \\times S$ grid. If the center of an object falls into a grid cell, that grid cell is responsible for detecting that object.\n\nEach grid cell predicts $B$ bounding boxes and confidence scores for those boxes. These confidence scores reflect how confident the model is that the box contains an object and also how accurate it thinks the box is that it predicts. Formally we define confidence as $\\Pr(\\textrm{Object}) * \\textrm{IOU}_{\\textrm{pred}}^{\\textrm{truth}}$. If no object exists in that cell, the confidence scores should be zero. Otherwise we want the confidence score to equal the intersection over union (IOU) between the predicted box and the ground truth.\n\nEach bounding box consists of 5 predictions: $x$, $y$, $w$, $h$, and confidence. The $(x,y)$ coordinates represent the center of the box relative to the bounds of the grid cell. The width and height are predicted relative to the whole image. Finally the confidence prediction represents the IOU between the predicted box and any ground truth box.","char_count":3723,"start_para":11,"end_para":21,"start_sent":null,"end_sent":null,"placeholder":{"count":{"eq_display":0,"eq_inline":0,"figure":0,"table":0},"ids":{"eq_display":[],"eq_inline":[],"figure":[],"table":[]}}}
{"doc_id":"source","schema_version":"0.1","ts":"2025-09-15T08:07:33Z","type":"chunk","chunk_index":2,"text":"Each bounding box consists of 5 predictions: $x$, $y$, $w$, $h$, and confidence. The $(x,y)$ coordinates represent the center of the box relative to the bounds of the grid cell. The width and height are predicted relative to the whole image. Finally the confidence prediction represents the IOU between the predicted box and any ground truth box.\n\nEach grid cell also predicts $C$ conditional class probabilities, $\\Pr(\\textrm{Class}_i | \\textrm{Object})$. These probabilities are conditioned on the grid cell containing an object. We only predict one set of class probabilities per grid cell, regardless of the number of boxes $B$.\n\nAt test time we multiply the conditional class probabilities and the individual box confidence predictions,\n\\begin{equation}\n\\scriptsize\n\\Pr(\\textrm{Class}_i | \\textrm{Object}) * \\Pr(\\textrm{Object}) * \\textrm{IOU}_{\\textrm{pred}}^{\\textrm{truth}} = \\Pr(\\textrm{Class}_i)*\\textrm{IOU}_{\\textrm{pred}}^{\\textrm{truth}}\n\\end{equation}\nwhich gives us class-specific confidence scores for each box. These scores encode both the probability of that class appearing in the box and how well the predicted box fits the object.\n\n⟨FIG:model⟩\n\nFor evaluating YOLO on \\textsc{Pascal} VOC, we use $S=7$, $B=2$. \\textsc{Pascal} VOC has 20 labelled classes so $C=20$. Our final prediction is a $7 \\times 7 \\times 30$ tensor.\n\n\\subsection{Network Design}\n\n⟨FIG:net⟩\n\nWe implement this model as a convolutional neural network and evaluate it on the \\textsc{Pascal} VOC detection dataset \\cite{Everingham15}. The initial convolutional layers of the network extract features from the image while the fully connected layers predict the output probabilities and coordinates.\n\nOur network architecture is inspired by the GoogLeNet model for image classification \\cite{DBLP:journals/corr/SzegedyLJSRAEVR14}. Our network has 24 convolutional layers followed by 2 fully connected layers. Instead of the inception modules used by GoogLeNet, we simply use $1 \\times 1$ reduction layers followed by $3 \\times 3$ convolutional layers, similar to Lin et al \\cite{DBLP:journals/corr/LinCY13}. The full network is shown in Figure \\ref{net}.\n\nWe also train a fast version of YOLO designed to push the boundaries of fast object detection. Fast YOLO uses a neural network with fewer convolutional layers (9 instead of 24) and fewer filters in those layers. Other than the size of the network, all training and testing parameters are the same between YOLO and Fast YOLO.\n\nThe final output of our network is the $7 \\times 7 \\times 30$ tensor of predictions.\n\n\\subsection{Training}\n\nWe pretrain our convolutional layers on the ImageNet 1000-class competition dataset \\cite{ILSVRC15}. For pretraining we use the first 20 convolutional layers from Figure \\ref{net} followed by a average-pooling layer and a fully connected layer. We train this network for approximately a week and achieve a single crop top-5 accuracy of 88\\% on the ImageNet 2012 validation set, comparable to the GoogLeNet models in Caffe's Model Zoo \\cite{zoo}. We use the Darknet framework for all training and inference \\cite{darknet13}.\n\nWe then convert the model to perform detection. Ren et al. show that adding both convolutional and connected layers to pretrained networks can improve performance \\cite{DBLP:journals/corr/RenHGZ015}. Following their example, we add four convolutional layers and two fully connected layers with randomly initialized weights. Detection often requires fine-grained visual information so we increase the input resolution of the network from $224 \\times 224$ to $448 \\times 448$.","char_count":3578,"start_para":21,"end_para":34,"start_sent":null,"end_sent":null,"placeholder":{"count":{"eq_display":0,"eq_inline":0,"figure":2,"table":0},"ids":{"eq_display":[],"eq_inline":[],"figure":["model","net"],"table":[]}}}
{"doc_id":"source","schema_version":"0.1","ts":"2025-09-15T08:07:33Z","type":"chunk","chunk_index":3,"text":"We then convert the model to perform detection. Ren et al. show that adding both convolutional and connected layers to pretrained networks can improve performance \\cite{DBLP:journals/corr/RenHGZ015}. Following their example, we add four convolutional layers and two fully connected layers with randomly initialized weights. Detection often requires fine-grained visual information so we increase the input resolution of the network from $224 \\times 224$ to $448 \\times 448$.\n\nOur final layer predicts both class probabilities and bounding box coordinates. We normalize the bounding box width and height by the image width and height so that they fall between 0 and 1. We parametrize the bounding box $x$ and $y$ coordinates to be offsets of a particular grid cell location so they are also bounded between 0 and 1.\n\nWe use a linear activation function for the final layer and all other layers use the following leaky rectified linear activation:\n\n\\begin{equation}\n\\phi(x) =\n\\begin{cases}\n x, & \\text{if } x > 0\\\\\n 0.1x, & \\text{otherwise}\n \\end{cases}\n\\end{equation}\n\nWe optimize for sum-squared error in the output of our model. We use sum-squared error because it is easy to optimize, however it does not perfectly align with our goal of maximizing average precision. It weights localization error equally with classification error which may not be ideal. Also, in every image many grid cells do not contain any object. This pushes the ``confidence'' scores of those cells towards zero, often overpowering the gradient from cells that do contain objects. This can lead to model instability, causing training to diverge early on.\n\nTo remedy this, we increase the loss from bounding box coordinate predictions and decrease the loss from confidence predictions for boxes that don't contain objects. We use two parameters, $\\lambda_\\textrm{coord}$ and $\\lambda_\\textrm{noobj}$ to accomplish this. We set $\\lambda_\\textrm{coord} = 5$ and $\\lambda_\\textrm{noobj} = .5$.\n\nSum-squared error also equally weights errors in large boxes and small boxes. Our error metric should reflect that small deviations in large boxes matter less than in small boxes. To partially address this we predict the square root of the bounding box width and height instead of the width and height directly.\n\nYOLO predicts multiple bounding boxes per grid cell. At training time we only want one bounding box predictor to be responsible for each object. We assign one predictor to be ``responsible'' for predicting an object based on which prediction has the highest current IOU with the ground truth. This leads to specialization between the bounding box predictors. Each predictor gets better at predicting certain sizes, aspect ratios, or classes of object, improving overall recall.","char_count":2757,"start_para":34,"end_para":41,"start_sent":null,"end_sent":null,"placeholder":{"count":{"eq_display":0,"eq_inline":0,"figure":0,"table":0},"ids":{"eq_display":[],"eq_inline":[],"figure":[],"table":[]}}}
{"doc_id":"source","schema_version":"0.1","ts":"2025-09-15T08:07:33Z","type":"chunk","chunk_index":4,"text":"YOLO predicts multiple bounding boxes per grid cell. At training time we only want one bounding box predictor to be responsible for each object. We assign one predictor to be ``responsible'' for predicting an object based on which prediction has the highest current IOU with the ground truth. This leads to specialization between the bounding box predictors. Each predictor gets better at predicting certain sizes, aspect ratios, or classes of object, improving overall recall.\n\nDuring training we optimize the following, multi-part loss function:\n\\scriptsize\n\\begin{multline}\n\\lambda_\\textbf{coord}\n\\sum_{i = 0}^{S^2}\n \\sum_{j = 0}^{B}\n \\mathlarger{\\mathbbm{1}}_{ij}^{\\text{obj}}\n \\left[\n \\left(\n x_i - \\hat{x}_i\n \\right)^2 +\n \\left(\n y_i - \\hat{y}_i\n \\right)^2\n \\right]\n\\\\\n+ \\lambda_\\textbf{coord} \n\\sum_{i = 0}^{S^2}\n \\sum_{j = 0}^{B}\n \\mathlarger{\\mathbbm{1}}_{ij}^{\\text{obj}}\n \\left[\n \\left(\n \\sqrt{w_i} - \\sqrt{\\hat{w}_i}\n \\right)^2 +\n \\left(\n \\sqrt{h_i} - \\sqrt{\\hat{h}_i}\n \\right)^2\n \\right]\n\\\\\n+ \\sum_{i = 0}^{S^2}\n \\sum_{j = 0}^{B}\n \\mathlarger{\\mathbbm{1}}_{ij}^{\\text{obj}}\n \\left(\n C_i - \\hat{C}_i\n \\right)^2\n\\\\\n+ \\lambda_\\textrm{noobj}\n\\sum_{i = 0}^{S^2}\n \\sum_{j = 0}^{B}\n \\mathlarger{\\mathbbm{1}}_{ij}^{\\text{noobj}}\n \\left(\n C_i - \\hat{C}_i\n \\right)^2\n\\\\\n+ \\sum_{i = 0}^{S^2}\n\\mathlarger{\\mathbbm{1}}_i^{\\text{obj}}\n \\sum_{c \\in \\textrm{classes}}\n \\left(\n p_i(c) - \\hat{p}_i(c)\n \\right)^2\n\\end{multline}\n\\normalsize\nwhere $\\mathbbm{1}_i^{\\text{obj}}$ denotes if object appears in cell $i$ and $\\mathbbm{1}_{ij}^{\\text{obj}}$ denotes that the $j$th bounding box predictor in cell $i$ is ``responsible'' for that prediction.\n\nNote that the loss function only penalizes classification error if an object is present in that grid cell (hence the conditional class probability discussed earlier). It also only penalizes bounding box coordinate error if that predictor is ``responsible'' for the ground truth box (i.e. has the highest IOU of any predictor in that grid cell).\n\nWe train the network for about 135 epochs on the training and validation data sets from \\textsc{Pascal} VOC 2007 and 2012. When testing on 2012 we also include the VOC 2007 test data for training. Throughout training we use a batch size of 64, a momentum of $0.9$ and a decay of $0.0005$.\n\nOur learning rate schedule is as follows: For the first epochs we slowly raise the learning rate from $10^{-3}$ to $10^{-2}$. If we start at a high learning rate our model often diverges due to unstable gradients. We continue training with $10^{-2}$ for 75 epochs, then $10^{-3}$ for 30 epochs, and finally $10^{-4}$ for 30 epochs.\n\nTo avoid overfitting we use dropout and extensive data augmentation. A dropout layer with rate~=~.5 after the first connected layer prevents co-adaptation between layers \\cite{hinton2012improving}. For data augmentation we introduce random scaling and translations of up to 20\\% of the original image size. We also randomly adjust the exposure and saturation of the image by up to a factor of $1.5$ in the HSV color space.\n\n\\subsection{Inference}\n\nJust like in training, predicting detections for a test image only requires one network evaluation. On \\textsc{Pascal} VOC the network predicts 98 bounding boxes per image and class probabilities for each box. YOLO is extremely fast at test time since it only requires a single network evaluation, unlike classifier-based methods.","char_count":3389,"start_para":41,"end_para":48,"start_sent":null,"end_sent":null,"placeholder":{"count":{"eq_display":0,"eq_inline":0,"figure":0,"table":0},"ids":{"eq_display":[],"eq_inline":[],"figure":[],"table":[]}}}
{"doc_id":"source","schema_version":"0.1","ts":"2025-09-15T08:07:33Z","type":"chunk","chunk_index":5,"text":"Just like in training, predicting detections for a test image only requires one network evaluation. On \\textsc{Pascal} VOC the network predicts 98 bounding boxes per image and class probabilities for each box. YOLO is extremely fast at test time since it only requires a single network evaluation, unlike classifier-based methods.\n\nThe grid design enforces spatial diversity in the bounding box predictions. Often it is clear which grid cell an object falls in to and the network only predicts one box for each object. However, some large objects or objects near the border of multiple cells can be well localized by multiple cells. Non-maximal suppression can be used to fix these multiple detections. While not critical to performance as it is for R-CNN or DPM, non-maximal suppression adds 2-3\\% in mAP.\n\n\\subsection{Limitations of YOLO}\n\nYOLO imposes strong spatial constraints on bounding box predictions since each grid cell only predicts two boxes and can only have one class. This spatial constraint limits the number of nearby objects that our model can predict. Our model struggles with small objects that appear in groups, such as flocks of birds.\n\nSince our model learns to predict bounding boxes from data, it struggles to generalize to objects in new or unusual aspect ratios or configurations. Our model also uses relatively coarse features for predicting bounding boxes since our architecture has multiple downsampling layers from the input image.\n\nFinally, while we train on a loss function that approximates detection performance, our loss function treats errors the same in small bounding boxes versus large bounding boxes. A small error in a large box is generally benign but a small error in a small box has a much greater effect on IOU. Our main source of error is incorrect localizations.\n\n\\section{Comparison to Other Detection Systems}\n\nObject detection is a core problem in computer vision. Detection pipelines generally start by extracting a set of robust features from input images (Haar \\cite{papageorgiou1998general}, SIFT \\cite{lowe1999object}, HOG \\cite{dalal2005histograms}, convolutional features \\cite{donahue2013decaf}). Then, classifiers \\cite{viola2001robust,lienhart2002extended,girshick2014rich,lsvm-pami} or localizers \\cite{blaschko2008learning,DBLP:journals/corr/SermanetEZMFL13} are used to identify objects in the feature space. These classifiers or localizers are run either in sliding window fashion over the whole image or on some subset of regions in the image \\cite{uijlings2013selective,gould2009region,zitnick2014edge}. We compare the YOLO detection system to several top detection frameworks, highlighting key similarities and differences.\n\n\\textbf{Deformable parts models.} Deformable parts models (DPM) use a sliding window approach to object detection \\cite{lsvm-pami}. DPM uses a disjoint pipeline to extract static features, classify regions, predict bounding boxes for high scoring regions, etc. Our system replaces all of these disparate parts with a single convolutional neural network. The network performs feature extraction, bounding box prediction, non-maximal suppression, and contextual reasoning all concurrently. Instead of static features, the network trains the features in-line and optimizes them for the detection task. Our unified architecture leads to a faster, more accurate model than DPM.","char_count":3366,"start_para":48,"end_para":56,"start_sent":null,"end_sent":null,"placeholder":{"count":{"eq_display":0,"eq_inline":0,"figure":0,"table":0},"ids":{"eq_display":[],"eq_inline":[],"figure":[],"table":[]}}}
{"doc_id":"source","schema_version":"0.1","ts":"2025-09-15T08:07:33Z","type":"chunk","chunk_index":6,"text":"\\textbf{Deformable parts models.} Deformable parts models (DPM) use a sliding window approach to object detection \\cite{lsvm-pami}. DPM uses a disjoint pipeline to extract static features, classify regions, predict bounding boxes for high scoring regions, etc. Our system replaces all of these disparate parts with a single convolutional neural network. The network performs feature extraction, bounding box prediction, non-maximal suppression, and contextual reasoning all concurrently. Instead of static features, the network trains the features in-line and optimizes them for the detection task. Our unified architecture leads to a faster, more accurate model than DPM.\n\n\\textbf{R-CNN.} R-CNN and its variants use region proposals instead of sliding windows to find objects in images. Selective Search \\cite{uijlings2013selective} generates potential bounding boxes, a convolutional network extracts features, an SVM scores the boxes, a linear model adjusts the bounding boxes, and non-max suppression eliminates duplicate detections. Each stage of this complex pipeline must be precisely tuned independently and the resulting system is very slow, taking more than 40 seconds per image at test time \\cite{DBLP:journals/corr/Girshick15}.\n\nYOLO shares some similarities with R-CNN. Each grid cell proposes potential bounding boxes and scores those boxes using convolutional features. However, our system puts spatial constraints on the grid cell proposals which helps mitigate multiple detections of the same object. Our system also proposes far fewer bounding boxes, only 98 per image compared to about 2000 from Selective Search. Finally, our system combines these individual components into a single, jointly optimized model.\n\n\\textbf{Other Fast Detectors} Fast and Faster R-CNN focus on speeding up the R-CNN framework by sharing computation and using neural networks to propose regions instead of Selective Search \\cite{DBLP:journals/corr/Girshick15} \\cite{ren2015faster}. While they offer speed and accuracy improvements over R-CNN, both still fall short of real-time performance.\n\nMany research efforts focus on speeding up the DPM pipeline \\cite{sadeghi201430hz} \\cite{yan2014fastest} \\cite{dean2013fast}. They speed up HOG computation, use cascades, and push computation to GPUs. However, only 30Hz DPM \\cite{sadeghi201430hz} actually runs in real-time.\n\nInstead of trying to optimize individual components of a large detection pipeline, YOLO throws out the pipeline entirely and is fast by design.\n\nDetectors for single classes like faces or people can be highly optimized since they have to deal with much less variation \\cite{viola2004robust}. YOLO is a general purpose detector that learns to detect a variety of objects simultaneously.\n\n\\textbf{Deep MultiBox.} Unlike R-CNN, Szegedy et al. train a convolutional neural network to predict regions of interest \\cite{erhan2014scalable} instead of using Selective Search. MultiBox can also perform single object detection by replacing the confidence prediction with a single class prediction. However, MultiBox cannot perform general object detection and is still just a piece in a larger detection pipeline, requiring further image patch classification. Both YOLO and MultiBox use a convolutional network to predict bounding boxes in an image but YOLO is a complete detection system.","char_count":3345,"start_para":56,"end_para":63,"start_sent":null,"end_sent":null,"placeholder":{"count":{"eq_display":0,"eq_inline":0,"figure":0,"table":0},"ids":{"eq_display":[],"eq_inline":[],"figure":[],"table":[]}}}
{"doc_id":"source","schema_version":"0.1","ts":"2025-09-15T08:07:33Z","type":"chunk","chunk_index":7,"text":"\\textbf{Deep MultiBox.} Unlike R-CNN, Szegedy et al. train a convolutional neural network to predict regions of interest \\cite{erhan2014scalable} instead of using Selective Search. MultiBox can also perform single object detection by replacing the confidence prediction with a single class prediction. However, MultiBox cannot perform general object detection and is still just a piece in a larger detection pipeline, requiring further image patch classification. Both YOLO and MultiBox use a convolutional network to predict bounding boxes in an image but YOLO is a complete detection system.\n\n\\textbf{OverFeat.} Sermanet et al. train a convolutional neural network to perform localization and adapt that localizer to perform detection \\cite{DBLP:journals/corr/SermanetEZMFL13}. OverFeat efficiently performs sliding window detection but it is still a disjoint system. OverFeat optimizes for localization, not detection performance. Like DPM, the localizer only sees local information when making a prediction. OverFeat cannot reason about global context and thus requires significant post-processing to produce coherent detections.\n\n\\textbf{MultiGrasp.} Our work is similar in design to work on grasp detection by Redmon et al \\cite{DBLP:journals/corr/RedmonA14}. Our grid approach to bounding box prediction is based on the MultiGrasp system for regression to grasps. However, grasp detection is a much simpler task than object detection. MultiGrasp only needs to predict a single graspable region for an image containing one object. It doesn't have to estimate the size, location, or boundaries of the object or predict it's class, only find a region suitable for grasping. YOLO predicts both bounding boxes and class probabilities for multiple objects of multiple classes in an image.\n\n\\section{Experiments}\n\nFirst we compare YOLO with other real-time detection systems on \\textsc{Pascal} VOC 2007. To understand the differences between YOLO and R-CNN variants we explore the errors on VOC 2007 made by YOLO and Fast R-CNN, one of the highest performing versions of R-CNN \\cite{DBLP:journals/corr/Girshick15}. Based on the different error profiles we show that YOLO can be used to rescore Fast R-CNN detections and reduce the errors from background false positives, giving a significant performance boost. We also present VOC 2012 results and compare mAP to current state-of-the-art methods. Finally, we show that YOLO generalizes to new domains better than other detectors on two artwork datasets.\n\n\\subsection{Comparison to Other Real-Time Systems}\n\nMany research efforts in object detection focus on making standard detection pipelines fast. \\cite{dean2013fast} \\cite{yan2014fastest} \\cite{sadeghi201430hz} \\cite{DBLP:journals/corr/Girshick15} \\cite{he2014spatial} \\cite{ren2015faster} However, only Sadeghi et al. actually produce a detection system that runs in real-time (30 frames per second or better) \\cite{sadeghi201430hz}. We compare YOLO to their GPU implementation of DPM which runs either at 30Hz or 100Hz. While the other efforts don't reach the real-time milestone we also compare their relative mAP and speed to examine the accuracy-performance tradeoffs available in object detection systems.\n\n⟨TAB:timing⟩\n\nFast YOLO is the fastest object detection method on \\textsc{Pascal}; as far as we know, it is the fastest extant object detector. With $52.7\\%$ mAP, it is more than twice as accurate as prior work on real-time detection. YOLO pushes mAP to $63.4\\%$ while still maintaining real-time performance.\n\nWe also train YOLO using VGG-16. This model is more accurate but also significantly slower than YOLO. It is useful for comparison to other detection systems that rely on VGG-16 but since it is slower than real-time the rest of the paper focuses on our faster models.","char_count":3794,"start_para":63,"end_para":72,"start_sent":null,"end_sent":null,"placeholder":{"count":{"eq_display":0,"eq_inline":0,"figure":0,"table":1},"ids":{"eq_display":[],"eq_inline":[],"figure":[],"table":["timing"]}}}
{"doc_id":"source","schema_version":"0.1","ts":"2025-09-15T08:07:33Z","type":"chunk","chunk_index":8,"text":"We also train YOLO using VGG-16. This model is more accurate but also significantly slower than YOLO. It is useful for comparison to other detection systems that rely on VGG-16 but since it is slower than real-time the rest of the paper focuses on our faster models.\n\nFastest DPM effectively speeds up DPM without sacrificing much mAP but it still misses real-time performance by a factor of 2 \\cite{yan2014fastest}. It also is limited by DPM's relatively low accuracy on detection compared to neural network approaches.\n\nR-CNN minus R replaces Selective Search with static bounding box proposals \\cite{lenc2015r}. While it is much faster than R-CNN, it still falls short of real-time and takes a significant accuracy hit from not having good proposals.\n\nFast R-CNN speeds up the classification stage of R-CNN but it still relies on selective search which can take around 2 seconds per image to generate bounding box proposals. Thus it has high mAP but at $0.5$ fps it is still far from real-time.\n\nThe recent Faster R-CNN replaces selective search with a neural network to propose bounding boxes, similar to Szegedy et al. \\cite{erhan2014scalable} In our tests, their most accurate model achieves 7 fps while a smaller, less accurate one runs at 18 fps. The VGG-16 version of Faster R-CNN is 10 mAP higher but is also 6 times slower than YOLO. The Zeiler-Fergus Faster R-CNN is only 2.5 times slower than YOLO but is also less accurate.\n\n\\subsection{VOC 2007 Error Analysis}\n\\label{error}\n\nTo further examine the differences between YOLO and state-of-the-art detectors, we look at a detailed breakdown of results on VOC 2007. We compare YOLO to Fast R-CNN since Fast R-CNN is one of the highest performing detectors on \\textsc{Pascal} and it's detections are publicly available.\n\nWe use the methodology and tools of Hoiem et al. \\cite{hoiem2012diagnosing} For each category at test time we look at the top N predictions for that category. Each prediction is either correct or it is classified based on the type of error:\n\n\\begin{itemize}\n\\itemsep0em\n\\item Correct: correct class and $\\textrm{IOU} > .5$\n\\item Localization: correct class, $.1 < \\textrm{IOU} < .5$\n\\item Similar: class is similar, $\\textrm{IOU} > .1$\n\\item Other: class is wrong, $\\textrm{IOU} > .1$\n\\item Background: $\\textrm{IOU} < .1$ for any object\n\\end{itemize}\n\nFigure \\ref{errors} shows the breakdown of each error type averaged across all 20 classes.\n\n⟨FIG:errors⟩\n\nYOLO struggles to localize objects correctly. Localization errors account for more of YOLO's errors than all other sources combined. Fast R-CNN makes much fewer localization errors but far more background errors. 13.6\\% of it's top detections are false positives that don't contain any objects. Fast R-CNN is almost 3x more likely to predict background detections than YOLO.\n\n\\subsection{Combining Fast R-CNN and YOLO}\n\n⟨TAB:combine⟩\n\n⟨TAB:results⟩\n\nYOLO makes far fewer background mistakes than Fast R-CNN. By using YOLO to eliminate background detections from Fast R-CNN we get a significant boost in performance. For every bounding box that R-CNN predicts we check to see if YOLO predicts a similar box. If it does, we give that prediction a boost based on the probability predicted by YOLO and the overlap between the two boxes.\n\nThe best Fast R-CNN model achieves a mAP of 71.8\\% on the VOC 2007 test set. When combined with YOLO, its mAP increases by 3.2\\% to 75.0\\%. We also tried combining the top Fast R-CNN model with several other versions of Fast R-CNN. Those ensembles produced small increases in mAP between .3 and .6\\%, see Table \\ref{combine} for details.","char_count":3611,"start_para":72,"end_para":88,"start_sent":null,"end_sent":null,"placeholder":{"count":{"eq_display":0,"eq_inline":0,"figure":1,"table":2},"ids":{"eq_display":[],"eq_inline":[],"figure":["errors"],"table":["combine","results"]}}}
{"doc_id":"source","schema_version":"0.1","ts":"2025-09-15T08:07:33Z","type":"chunk","chunk_index":9,"text":"The best Fast R-CNN model achieves a mAP of 71.8\\% on the VOC 2007 test set. When combined with YOLO, its mAP increases by 3.2\\% to 75.0\\%. We also tried combining the top Fast R-CNN model with several other versions of Fast R-CNN. Those ensembles produced small increases in mAP between .3 and .6\\%, see Table \\ref{combine} for details.\n\nThe boost from YOLO is not simply a byproduct of model ensembling since there is little benefit from combining different versions of Fast R-CNN. Rather, it is precisely because YOLO makes different kinds of mistakes at test time that it is so effective at boosting Fast R-CNN's performance.\n\nUnfortunately, this combination doesn't benefit from the speed of YOLO since we run each model seperately and then combine the results. However, since YOLO is so fast it doesn't add any significant computational time compared to Fast R-CNN.\n\n\\subsection{VOC 2012 Results}\n\nOn the VOC 2012 test set, YOLO scores 57.9\\% mAP. This is lower than the current state of the art, closer to the original R-CNN using VGG-16, see Table \\ref{results}. Our system struggles with small objects compared to its closest competitors. On categories like \\texttt{bottle}, \\texttt{sheep}, and \\texttt{tv/monitor} YOLO scores 8-10\\% lower than R-CNN or Feature Edit. However, on other categories like \\texttt{cat} and \\texttt{train} YOLO achieves higher performance.\n\nOur combined Fast R-CNN + YOLO model is one of the highest performing detection methods. Fast R-CNN gets a 2.3\\% improvement from the combination with YOLO, boosting it 5 spots up on the public leaderboard.\n\n\\ifx 1 0\n\\subsection{Speed}\n\nAt test time YOLO processes images at 45 frames per second on an Nvidia Titan X GPU. It is considerably faster than classifier-based methods with similar mAP. Normal R-CNN using AlexNet or the small VGG network take 400-500x longer to process images. The recently proposed Fast R-CNN shares convolutional features between the bounding boxes but still relies on selective search for bounding box proposals which accounts for the bulk of their processing time. YOLO is still around 100x faster than Fast R-CNN. Table \\ref{timing} shows a full comparison between multiple R-CNN and Fast R-CNN variants and YOLO.\n\n⟨TAB:timing⟩\n\\fi\n\n\\subsection{Generalizability: Person Detection in Artwork}\n\n⟨FIG:art⟩\n\n⟨FIG:images⟩\n\nAcademic datasets for object detection draw the training and testing data from the same distribution. In real-world applications it is hard to predict all possible use cases and the test data can diverge from what the system has seen before \\cite{cai2015cross}.\n\nWe compare YOLO to other detection systems on the Picasso Dataset \\cite{ginosar2014detecting} and the People-Art Dataset \\cite{cai2015cross}, two datasets for testing person detection on artwork.\n\nFigure \\ref{art} shows comparative performance between YOLO and other detection methods. For reference, we give VOC 2007 detection AP on \\texttt{person} where all models are trained only on VOC 2007 data. On Picasso models are trained on VOC 2012 while on People-Art they are trained on VOC 2010.\n\nR-CNN has high AP on VOC 2007. However, R-CNN drops off considerably when applied to artwork. R-CNN uses Selective Search for bounding box proposals which is tuned for natural images. The classifier step in R-CNN only sees small regions and needs good proposals.\n\nDPM maintains its AP well when applied to artwork. Prior work theorizes that DPM performs well because it has strong spatial models of the shape and layout of objects. Though DPM doesn't degrade as much as R-CNN, it starts from a lower AP.","char_count":3589,"start_para":88,"end_para":104,"start_sent":null,"end_sent":null,"placeholder":{"count":{"eq_display":0,"eq_inline":0,"figure":2,"table":1},"ids":{"eq_display":[],"eq_inline":[],"figure":["art","images"],"table":["timing"]}}}
{"doc_id":"source","schema_version":"0.1","ts":"2025-09-15T08:07:33Z","type":"chunk","chunk_index":10,"text":"DPM maintains its AP well when applied to artwork. Prior work theorizes that DPM performs well because it has strong spatial models of the shape and layout of objects. Though DPM doesn't degrade as much as R-CNN, it starts from a lower AP.\n\nYOLO has good performance on VOC 2007 and its AP degrades less than other methods when applied to artwork. Like DPM, YOLO models the size and shape\nof objects, as well as relationships between objects and where objects commonly appear. Artwork and natural images are very different on a pixel level but they are similar in terms of the size and shape of objects, thus YOLO can still predict good bounding boxes and detections.\n\n\\section{Real-Time Detection In The Wild}\n\nYOLO is a fast, accurate object detector, making it ideal for computer vision applications. We connect YOLO to a webcam and verify that it maintains real-time performance, including the time to fetch images from the camera and display the detections.\n\nThe resulting system is interactive and engaging. While YOLO processes images individually, when attached to a webcam it functions like a tracking system, detecting objects as they move around and change in appearance. A demo of the system and the source code can be found on our project website: \\url{http://pjreddie.com/yolo/}.\n\n\\section{Conclusion}\n\nWe introduce YOLO, a unified model for object detection. Our model is simple to construct and can be trained directly on full images. Unlike classifier-based approaches, YOLO is trained on a loss function that directly corresponds to detection performance and the entire model is trained jointly.\n\nFast YOLO is the fastest general-purpose object detector in the literature and YOLO pushes the state-of-the-art in real-time object detection. YOLO also generalizes well to new domains making it ideal for applications that rely on fast, robust object detection.\n\n\\noindent\\textbf{Acknowledgements:} This work is partially supported by ONR N00014-13-1-0720, NSF IIS-1338054, and The Allen Distinguished Investigator Award.\n\n\\pagebreak\n{\\small\n\\bibliographystyle{ieee}\n\\bibliography{egbib}\n}","char_count":2104,"start_para":104,"end_para":113,"start_sent":null,"end_sent":null,"placeholder":{"count":{"eq_display":0,"eq_inline":0,"figure":0,"table":0},"ids":{"eq_display":[],"eq_inline":[],"figure":[],"table":[]}}}
